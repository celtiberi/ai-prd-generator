# Cursor AI IDE Rules

This document defines the rules and guidelines for the AI IDE to follow. The rules are provided in YAML format for AI parsing while maintaining human readability.

```yaml
rules:
  directory_maintenance:
    description: Keep directory structure documentation in sync
    file: .notes/directory_structure.md
    dependencies_documentation:
       path: .notes/dependencies
       rules:
         - Documentation is immutable reference material
         - Never modify external dependency documentation
         - If documentation seems incorrect, implementation should be fixed
         - New documentation can be added but existing files are read-only
       examples:
         correct:
           - Reading documentation to understand API
           - Fixing implementation to match documentation
           - Adding new dependency documentation files
         incorrect:
           - Modifying existing dependency documentation
           - Updating docs to match incorrect implementation
           - Changing API documentation to fix errors
    automation:
      script: scripts/update_directory.sh
      triggers:
        - Pre-commit hook
        - Manual updates via ./scripts/update_directory.sh
      requirements:
        - yq must be installed (brew install yq)
        - Script must be executable (chmod +x scripts/update_directory.sh)
        - Git hooks must be installed (./scripts/install-hooks.sh)
    requirements:
      - Update when new directories or files are added
      - Update when files are moved or renamed
      - Update when component purposes change
      - Maintain both YAML structure and Quick Reference
```

## Quick Reference

Key points from the rules:

1. **Markdown Files**
   - Must have human-readable header
   - Must include JSON in code block
   - Must have quick reference section
   - Must use proper code fence syntax

2. **Testing**
   - Follow guidelines in `.notes/testing_guidelines.md`
   - Use proper test organization
   - Handle API quotas appropriately

3. **Code Quality**
   - Follow PEP 8 for Python
   - Maintain test coverage
   - Use TypeScript for frontend

4. **Security**
   - Never commit secrets
   - Validate all input
   - Follow security best practices

For full details, parse the JSON content above. 